<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>packaging on The Coding Lab</title>
    <link>https://the-coding-lab.com/tags/packaging/</link>
    <description>Recent content in packaging on The Coding Lab</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Feb 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://the-coding-lab.com/tags/packaging/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Publishing at Anaconda - 9/9</title>
      <link>https://the-coding-lab.com/2021/9-publishing-at-anaconda/</link>
      <pubDate>Thu, 25 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://the-coding-lab.com/2021/9-publishing-at-anaconda/</guid>
      <description>&lt;p&gt;Heya fellows,&lt;/p&gt;
&lt;p&gt;This is part 9 of the multi-part series &amp;ldquo;The Evolution of a Script&amp;rdquo;. The code of this post can be found on Github (see &lt;a href=&#34;https://github.com/NiklasTiede/tinyHTTPie/tree/9-Publishing-at-Anaconda&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;h4 id=&#34;contents&#34;&gt;Contents&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/1-the-evolution-of-a-script&#34;&gt;A Simple Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/2-sys-module&#34;&gt;Sys Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/3-argparse-module/&#34;&gt;Argparse Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/4-distribution-via-installation-script&#34;&gt;Distribution via Installation Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/5-distribution-via-setup-file&#34;&gt;Distribution via Setup File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/6-testing-and-continous-integration&#34;&gt;Testing and Continuous Integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/7-documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/8-publishing-at-pypi&#34;&gt;Publishing at PyPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/9-publishing-at-anaconda&#34;&gt;&lt;strong&gt;Publishing at Anaconda&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When a &lt;code&gt;setup.py&lt;/code&gt; file was already created, it&amp;rsquo;s pretty simple to go a step further and make an &lt;a href=&#34;https://anaconda.org&#34;&gt;Anaconda&lt;/a&gt; package. The metadata of the &lt;code&gt;setup.py&lt;/code&gt; file can be imported via jinja2 templating into the &lt;code&gt;meta.yml&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;% set data = load_setup_py_data() %}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tihttp&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: {{ &lt;span style=&#34;color:#ae81ff&#34;&gt;data[&amp;#39;version&amp;#39;] }}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;source&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;..&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;build&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;number&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;entry_points&lt;/span&gt;:
    {&lt;span style=&#34;color:#ae81ff&#34;&gt;% for entry_point in data[&amp;#39;entry_points&amp;#39;][&amp;#39;console_scripts&amp;#39;] %}&lt;/span&gt;
    - {{ &lt;span style=&#34;color:#ae81ff&#34;&gt;entry_point }}&lt;/span&gt;
    {&lt;span style=&#34;color:#ae81ff&#34;&gt;% endfor %}&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;python -m pip install --no-deps --ignore-installed .&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;requirements&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;build&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;python&lt;/span&gt;
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;pip&lt;/span&gt;
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;setuptools&lt;/span&gt;

  &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;python&lt;/span&gt;
    {&lt;span style=&#34;color:#ae81ff&#34;&gt;% for dep in data[&amp;#39;install_requires&amp;#39;] %}&lt;/span&gt;
    - {{ &lt;span style=&#34;color:#ae81ff&#34;&gt;dep.lower() }}&lt;/span&gt;
    {&lt;span style=&#34;color:#ae81ff&#34;&gt;% endfor %}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;test&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;imports&lt;/span&gt;:
    - {{ &lt;span style=&#34;color:#ae81ff&#34;&gt;data[&amp;#39;name&amp;#39;] }}&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;source_files&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;tests&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;requires&lt;/span&gt;:
    {&lt;span style=&#34;color:#ae81ff&#34;&gt;% for test_dep in data[&amp;#39;extras_require&amp;#39;][&amp;#39;dev&amp;#39;] %}&lt;/span&gt;
    - {{ &lt;span style=&#34;color:#ae81ff&#34;&gt;test_dep.lower() }}&lt;/span&gt;
    {&lt;span style=&#34;color:#ae81ff&#34;&gt;% endfor %}&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;commands&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;pytest tests&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;about&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;home&lt;/span&gt;: {{ &lt;span style=&#34;color:#ae81ff&#34;&gt;data[&amp;#39;url&amp;#39;] }}&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;license&lt;/span&gt;: {{ &lt;span style=&#34;color:#ae81ff&#34;&gt;data[&amp;#39;license&amp;#39;] }}&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;summary&lt;/span&gt;: {{ &lt;span style=&#34;color:#ae81ff&#34;&gt;data[&amp;#39;description&amp;#39;] }}&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;doc_source_url&lt;/span&gt;: {{ &lt;span style=&#34;color:#ae81ff&#34;&gt;data[&amp;#39;url&amp;#39;] + &amp;#39;/blob/master/README.md&amp;#39; }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can build the package.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ conda build .
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The generated file &lt;code&gt;tihttp-0.1.0-py37_0.tar.bz2&lt;/code&gt; can be found within the &lt;code&gt;anaconda3/conda-build/linux-64&lt;/code&gt; directory. To upload the package to the anaconda repository we have to register and then we can use the &lt;code&gt;anaconda upload&lt;/code&gt; command.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ anaconda upload home/niklas/anaconda3/conda-build/linux-64/tihttp-0.1.0-py37_0.tar.bz2

$ conda install -c niklastiede tihttp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But building and uploading packages for different Python interpreter versions and different operating systems is tedious. This work can be automated by a bash script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;~/anaconda3/bin:$PATH
pkg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tihttp&amp;#39;&lt;/span&gt;
array&lt;span style=&#34;color:#f92672&#34;&gt;=(&lt;/span&gt; 3.6 3.7 3.8 3.9 &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;# delete old built packages&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -d $HOME/conda-bld/ &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    rm -r $HOME/conda-bld/
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in $HOME/anaconda3/conda-bld/linux-64/$pkg*; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    echo $i
    rm $i
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Deleting old conda packages done!&amp;#34;&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;# building conda packages&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;array[@]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    echo $i
	conda build --py $i .
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Building conda packages done!&amp;#34;&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;# converting conda packages to other platforms&lt;/span&gt;
platforms&lt;span style=&#34;color:#f92672&#34;&gt;=(&lt;/span&gt; osx-64 linux-32 linux-64 win-32 win-64 &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; file in $HOME/anaconda3/conda-bld/linux-64/$pkg*; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    echo $file
    conda convert --platform all $file  -o $HOME/conda-bld/
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; platform in &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;platforms[@]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
        conda convert --platform $platform $file  -o $HOME/conda-bld/
    &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;converting packages to other platforms done!&amp;#34;&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;# uploading packages&lt;/span&gt;
find $HOME/conda-bld/**/$pkg*.tar.bz2 | &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; read file
&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    anaconda upload $file
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Uploading conda packages done!&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
</description> 
    </item>
    
    <item>
      <title>Publishing at PyPI - 8/9</title>
      <link>https://the-coding-lab.com/2021/8-publishing-at-pypi/</link>
      <pubDate>Tue, 23 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://the-coding-lab.com/2021/8-publishing-at-pypi/</guid>
      <description>&lt;p&gt;Heya fellows,&lt;/p&gt;
&lt;p&gt;This is part 8 of the multi-part series &amp;ldquo;The Evolution of a Script&amp;rdquo;. The code of this post can be found on Github (see &lt;a href=&#34;https://github.com/NiklasTiede/tinyHTTPie/tree/8-Publishing-at-PyPI&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;h4 id=&#34;contents&#34;&gt;Contents&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/1-the-evolution-of-a-script&#34;&gt;A Simple Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/2-sys-module&#34;&gt;Sys Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/3-argparse-module/&#34;&gt;Argparse Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/4-distribution-via-installation-script&#34;&gt;Distribution via Installation Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/5-distribution-via-setup-file&#34;&gt;Distribution via Setup File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/6-testing-and-continous-integration&#34;&gt;Testing and Continuous Integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/7-documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/8-publishing-at-pypi&#34;&gt;&lt;strong&gt;Publishing at PyPI&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/9-publishing-at-anaconda&#34;&gt;Publishing at Anaconda&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ok, now people can download our project from github and use it. But in our daily work we use the Python Packaging Index to install things. So how do we release our package on PyPI? First we have to decide which versioning scheme we will use. Semantic versioning (&lt;a href=&#34;https://semver.org/&#34;&gt;semver.org&lt;/a&gt;) and calendar versioning (&lt;a href=&#34;https://calver.org/&#34;&gt;calver.org&lt;/a&gt;) are commonly used. We decide to use semantic versioning in the following. Github allows us to make images of our project (tags). Often the tagging corresponds with the package release on PyPI. So let&amp;rsquo;s first create a tag:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git add .
$ git commit -m &amp;quot;v1.0.0&amp;quot;
$ git tag !$
$ git push origin &amp;quot;v1.0.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Tags are a great opportunity to see a project in reverse at every stage of its development. Next we will generate a source distribution (.tar.gz) and a wheel distribution (.whl).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install wheel

$ python setup.py sdist bdist_wheel
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The generated files can be found within the &lt;code&gt;dist&lt;/code&gt; directory. Now we have to register at &lt;a href=&#34;https://pypi.org/&#34;&gt;PyPI&lt;/a&gt; before we can upload our project. For testing purposes it&amp;rsquo;s convenient to upload the project to &lt;a href=&#34;https://test.pypi.org/&#34;&gt;TestPyPI&lt;/a&gt; first. So, let&amp;rsquo;s do that.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install twine

$ twine upload --repository testpypi dist/*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now let&amp;rsquo;s test installing &lt;code&gt;tihttp&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install -i https://test.pypi.org/pypi/ --extra-index-url https://pypi.org/simple tihttp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Our tools works perfectly fine!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ tihttp -H google.com
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;And now that we are sure that everything works, it&amp;rsquo;s time to upload things to PyPI.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ twine upload --repository pypi dist/*

$ pip install tihttp
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
</description> 
    </item>
    
    <item>
      <title>Documentation - 7/9</title>
      <link>https://the-coding-lab.com/2021/7-documentation/</link>
      <pubDate>Fri, 19 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://the-coding-lab.com/2021/7-documentation/</guid>
      <description>&lt;p&gt;Heya fellows,&lt;/p&gt;
&lt;p&gt;This is part 7 of the multi-part series &amp;ldquo;The Evolution of a Script&amp;rdquo;. The code of this post can be found on Github (see &lt;a href=&#34;https://github.com/NiklasTiede/tinyHTTPie/tree/7-Documentation&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;h4 id=&#34;contents&#34;&gt;Contents&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/1-the-evolution-of-a-script&#34;&gt;A Simple Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/2-sys-module&#34;&gt;Sys Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/3-argparse-module/&#34;&gt;Argparse Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/4-distribution-via-installation-script&#34;&gt;Distribution via Installation Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/5-distribution-via-setup-file&#34;&gt;Distribution via Setup File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/6-testing-and-continous-integration&#34;&gt;Testing and Continuous Integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/7-documentation&#34;&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/8-publishing-at-pypi&#34;&gt;Publishing at PyPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/9-publishing-at-anaconda&#34;&gt;Publishing at Anaconda&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Documentation can be supplied in different formats. Command line tools have a usage help (&lt;code&gt;--help&lt;/code&gt;). For smaller projects the &lt;code&gt;README.md&lt;/code&gt; can be sufficient enough whereas projects like libraries benefit from a more extensive hosted technical documentation (see &lt;a href=&#34;https://readthedocs.org/&#34;&gt;readthedocs&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create some documentation! &lt;code&gt;sphinx&lt;/code&gt; is a tool that will help us to simplify this process.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install sphinx

$ mkdir docs
$ cd docs
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Sphinx will ask us a couple of questions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sphinx-quickstart

&amp;gt; Separate source and build directories (y/n) [n]: y
&amp;gt; Project name: tinyHTTPie
&amp;gt; Author name(s): Niklas Tiede
&amp;gt; Project release []: 0.1.0
&amp;gt; Project language [en]: enter
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To create the documentation we have to use the &lt;code&gt;make html&lt;/code&gt; command within the &lt;code&gt;docs&lt;/code&gt; directory. This creates the HTML of our documentation.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd ..
$ make html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If we open the &lt;code&gt;index.html&lt;/code&gt; file in the browser we can see how our documentation will look like. But its appearance is pretty puristic. Therefore we use an often used theme to let it look nicer.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install sphinx_rtd_theme
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we have to customize the &lt;code&gt;conf.py&lt;/code&gt; file. We add the following lines:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sphinx_rtd_theme

extensions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sphinx_rtd_theme&amp;#34;&lt;/span&gt;,]
pygments_style &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sphinx&amp;#34;&lt;/span&gt;
version &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0.1.0&amp;#39;&lt;/span&gt;
html_theme &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sphinx_rtd_theme&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And render again.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ make html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now it looks way better! Ok, next we wanna write some more content. The documentation should be written in the reStructuredText (.rst) syntax. Here&amp;rsquo;s a nice &lt;a href=&#34;https://github.com/ralsina/rst-cheatsheet/blob/master/rst-cheatsheet.rst&#34;&gt;cheat sheet&lt;/a&gt;. A previewer will speed up things. I&amp;rsquo;ve added some documentation about tinyHTTPie, see &lt;a href=&#34;https://github.com/NiklasTiede/tinyHTTPie/blob/7-Documentation/docs/source/index.rst&#34;&gt;index.rst&lt;/a&gt;, &lt;a href=&#34;https://github.com/NiklasTiede/tinyHTTPie/blob/7-Documentation/docs/source/install.rst&#34;&gt;install.rst&lt;/a&gt; and &lt;a href=&#34;https://github.com/NiklasTiede/tinyHTTPie/blob/7-Documentation/docs/source/tutorial.rst&#34;&gt;tutorial.rst&lt;/a&gt;. The last step is to publish our documentation. We have to register at &lt;a href=&#34;https://readthedocs.org/&#34;&gt;readthedocs.org&lt;/a&gt; and let it hook our repository.&lt;/p&gt;
&lt;p&gt;Voilà! A nice &lt;a href=&#34;https://tinyhttpie.readthedocs.io/en/latest/&#34;&gt;tinyHTTPie documentation&lt;/a&gt; was created! I hope you see how easy it is to setup such a good-looking documentation.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
</description> 
    </item>
    
    <item>
      <title>Distribution via Setup File - 5/9</title>
      <link>https://the-coding-lab.com/2021/5-distribution-via-setup-file/</link>
      <pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://the-coding-lab.com/2021/5-distribution-via-setup-file/</guid>
      <description>&lt;p&gt;Heya fellows,&lt;/p&gt;
&lt;p&gt;This is part 5 of the multi-part series &amp;ldquo;The Evolution of a Script&amp;rdquo;. The code of this post can be found on Github (see &lt;a href=&#34;https://github.com/NiklasTiede/tinyHTTPie/tree/5-Distributing-by-Setup-File&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;h4 id=&#34;contents&#34;&gt;Contents&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/1-the-evolution-of-a-script&#34;&gt;A Simple Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/2-sys-module&#34;&gt;Sys Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/3-argparse-module/&#34;&gt;Argparse Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/4-distribution-via-installation-script&#34;&gt;Distribution via Installation Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/5-distribution-via-setup-file&#34;&gt;&lt;strong&gt;Distribution via Setup File&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/6-testing-and-continous-integration&#34;&gt;Testing and Continuous Integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/7-documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/8-publishing-at-pypi&#34;&gt;Publishing at PyPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/9-publishing-at-anaconda&#34;&gt;Publishing at Anaconda&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We have to write a &lt;code&gt;setup.py&lt;/code&gt; file and then we can use &lt;code&gt;pip install&lt;/code&gt; easily our script. We have to be in the directory of the &lt;code&gt;setup.py&lt;/code&gt; file and type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install .
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This installs the tool into the active virtual environment. But how does a &lt;code&gt;setup.py&lt;/code&gt; file looks like? Here&amp;rsquo;s a template containing the most important key-value pairs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pathlib
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; setuptools

setuptools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setup(
    name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tihttp&amp;#34;&lt;/span&gt;,
    version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.1.0&amp;#34;&lt;/span&gt;,

    package_dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;src&amp;#34;&lt;/span&gt;},
    packages&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;setuptools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_packages(where&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;src&amp;#34;&lt;/span&gt;),

    install_requires&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;requests&amp;gt;=2.21&amp;#34;&lt;/span&gt;,
    ],

    entry_points&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;console_scripts&amp;#34;&lt;/span&gt;:
        [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tihttp=tihttp.main:run_main&amp;#34;&lt;/span&gt;]
        },
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;package_dir&lt;/code&gt; and &lt;code&gt;packages&lt;/code&gt; values are necessary when a source layout is used, so that &lt;code&gt;setup.py&lt;/code&gt; knows where to look for the packages. We used here a source layout to show these key-values and how &lt;code&gt;entry_points&lt;/code&gt; change when used.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://the-coding-lab.com/img/script_entrypoint.png&#34; alt=&#34;script entrypoint&#34;&gt;&lt;/p&gt;
&lt;p&gt;The entry point is where the command line tool is invoked from. &lt;code&gt;tihttp&lt;/code&gt; can be easily installed locally by typing:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install .
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Another big advantage of this setup is that pip allows to install a package in editable mode&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install -e .
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This allows to continue developing while testing the tool easily.&lt;/p&gt;
&lt;p&gt;What do the other keys do?
platforms restricts&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
</description> 
    </item>
    
  </channel>
</rss>