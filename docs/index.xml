<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Coding Lab</title>
    <link>https://the-coding-lab.com/</link>
    <description>Recent content on The Coding Lab</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 25 Apr 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://the-coding-lab.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Managing Environments with Conda and pip</title>
      <link>https://the-coding-lab.com/2021/conda-and-pip/</link>
      <pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://the-coding-lab.com/2021/conda-and-pip/</guid>
      <description>&lt;p&gt;Heya fellows,&lt;/p&gt;
&lt;p&gt;When dealing with dependencies the Python world offers several tools to manage these. It&amp;rsquo;s important to deal with Python as well as non-Python packages, to handle different Python versions and to ensure a good isolation. Tools like &lt;code&gt;pipenv&lt;/code&gt; and &lt;code&gt;poetry&lt;/code&gt; are pretty popular for these purposes but &lt;code&gt;conda&lt;/code&gt; has proven to be the tool of choice within the scientific community over the years. üí™&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://the-coding-lab.com/img/conda.png&#34; alt=&#34;hello&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Conda&lt;/code&gt; im combination with &lt;code&gt;pip&lt;/code&gt; is what I like to use on  a daily basis. Conda handles non-Python code especially well and therefore libraries like &lt;code&gt;RDKit&lt;/code&gt; (cheminformatics library) are only available in the conda ecosystem. It&amp;rsquo;s a great resource for data scientific work.&lt;/p&gt;
&lt;p&gt;Here I wanna show you some basic commands of &lt;code&gt;conda&lt;/code&gt; and &lt;code&gt;pip&lt;/code&gt; I&amp;rsquo;m using to manage my dependencies.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;At first you have to install Anaconda on your system if it&amp;rsquo;s not already installed. In the following we will install pandas, matplotlib and jupyter lab so we have a nice environment for data scientific work.&lt;/p&gt;
&lt;h1 id=&#34;creating-environments-and-installing-packages&#34;&gt;Creating Environments and Installing Packages&lt;/h1&gt;
&lt;p&gt;At first we create our new environment:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ conda create -n my-new-environment python=3.8
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here we name the environment &lt;code&gt;my-new-environment&lt;/code&gt; and use Python version 3.8. Conda will collect package metadata and create our new environment. By activating our new environment&amp;hellip;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ conda activate my-new-environment
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;hellip;we leave condas base environment and enter our newly created environment. Then we can install the dependencies we need.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ conda install matplotlib pandas 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Jupyter lab is offered via the &lt;code&gt;conda-forge&lt;/code&gt; channel, a popular, well-maintained channel, not via the &lt;code&gt;default&lt;/code&gt; channel. That&amp;rsquo;s why we have to provide the channels name:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ conda install -c conda-forge jupyterlab
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or we add the channel right away to condas configuration so that the &lt;code&gt;conda-forge&lt;/code&gt; repo is searched on top of the &lt;code&gt;default&lt;/code&gt; channel when installing packages. Conda-forge is a pretty popular and well-maintained channel and therefore we will add it here permanently.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ conda config --add channels conda-forge
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can see that conda-forge was added to your &lt;code&gt;~./condarc&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;ssl_verify&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;channels&lt;/span&gt;:
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;conda-forge&lt;/span&gt;
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;defaults&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some of condas commands are similar those of &lt;code&gt;pip&lt;/code&gt;. To list the packages within your current environment we type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ conda list
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you want to search through all anaconda repositories for a package, then use this command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ anaconda search &amp;lt;package_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;managing-multiple-environments&#34;&gt;Managing Multiple Environments&lt;/h1&gt;
&lt;p&gt;But how do we deal with multiple environments? Let&amp;rsquo;s clone the environment we created in the first place:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ conda create --clone my-new-environment --name my-clone
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When typing &lt;code&gt;conda env list&lt;/code&gt; we see the two environments we created are next to the base environment.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ conda env list

# conda environments:
#
base                   /home/niklas/anaconda3
my-new-environment     /home/niklas/anaconda3/envs/my-new-environment
my-clone               /home/niklas/anaconda3/envs/my-clone
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can switch the environment by just activating the new environment.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ conda activate my-clone
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To check which environment is currently active we can type &lt;code&gt;conda info&lt;/code&gt;. BTW: Frameworks like Oh-My-Zsh show the active environment within the terminal which makes life easier.&lt;/p&gt;
&lt;p&gt;Ok, now lets clean up things and delete the cloned environment.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ conda deactivate 
$ conda env remove --name my-clone
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Conda caches all installed packages within the &amp;lsquo;pkgs&amp;rsquo; directory, so from time to time I clean it up to free up space.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ conda clean -h
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;sharing-environments&#34;&gt;Sharing Environments&lt;/h1&gt;
&lt;p&gt;Developers are no one-man armies. We share our work to other developers/engineers and they should be able to reproduce our work. Conda is able to export the environments dependencies as a yaml file and recreate the environment from this file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ conda env export --name my-new-environment &amp;gt; environment.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now all dependencies can be found in the &lt;code&gt;environment.yaml&lt;/code&gt; file. This file can be used by someone else to recreate the environment. When no &lt;code&gt;--file&lt;/code&gt; flag value is provided &lt;code&gt;conda&lt;/code&gt; searches for a &lt;code&gt;environment.yaml&lt;/code&gt; file in the current working directory and tries to recreate the environment from this file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ conda env create              
$ conda env create --file environment-dev.yaml   
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But don&amp;rsquo;t feel forced to only use conda packages when managing dependencies with conda! I also use conda when managing projects where I install only dependencies from pypi.org. Just as reminder here are the commands for storing/recreating &lt;code&gt;pip&lt;/code&gt; dependencies.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip freeze &amp;gt; requirements.txt   
$ pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Conda makes switching between different environments so easy and you have always access to conda packages. Unfortunately, condas speed for creating environments and installing conda packages is not outstanding but nonetheless it&amp;rsquo;s good enough that I prefer it over other dependancy manager üôÇ. If you want to see how to upload a project to Anaconda, take a look into my article &amp;lsquo;&lt;a href=&#34;https://the-coding-lab.com/2021/9-publishing-at-anaconda/&#34; target=‚Äù_blank‚Äù &gt;Publishing at Anaconda&lt;/a&gt;&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;Ok that&amp;rsquo;s it, I hope you I could arouse your curiosity for Anaconda. Thanks for your attention and have a nice day! üôÇ&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;All conda commands I&amp;rsquo;m using can be found in my &lt;a href=&#34;https://github.com/NiklasTiede/CheatSheet-Linux#anaconda&#34; target=‚Äù_blank‚Äù &gt;Linux Cheat Sheet&lt;/a&gt;.&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>Turning a Website into an API</title>
      <link>https://the-coding-lab.com/2021/github-trending-api/</link>
      <pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://the-coding-lab.com/2021/github-trending-api/</guid>
      <description>&lt;p&gt;Heya fellows,&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;
The amount of interesting data which can be found on websites is increasing from day to day. These data are scraped by search engines to improve search results, they&#39;re collected to create machine learning models or just processed and other services/apps are recreated from them. 
&lt;/p&gt;
&lt;p&gt;The latter can be achieved by scraping data and then exposing them as RESTful API to other developers so they can build their services/apps around it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://the-coding-lab.com/img/api_scheme.svg&#34; alt=&#34;scraping API Scheme&#34;&gt;&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;
Non-coding solutions like &lt;a href=&#34;https://apify.com&#34; target=‚Äù_blank‚Äù &gt;APIFY&lt;/a&gt; or &lt;a href=&#34;https://www.scraping-bot.io/&#34; target=‚Äù_blank‚Äù &gt;scrapingbot&lt;/a&gt; emerged in recent years to simplify this process. Data are scraped from popular (e-commerce) platforms and they are served over an API as developer-friendly JSON. But these apply only to big, popular platforms and cannot be applied to every website. 
&lt;/p&gt;
&lt;p align=&#34;justify&#34;&gt;
So I thought it would be nice to build such a web scraping API to learn more about web scraping and web development. I found this unofficial &lt;a href=&#34;https://github.com/huchenme/github-trending-api&#34; target=‚Äù_blank‚Äù &gt;Github trending API&lt;/a&gt; written in Javascript. It is not available anymore. So I planned to rewrite this API in Python and make it accessible.
&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;contents&#34;&gt;Contents&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#1-scraping-repository-data&#34;&gt;Scraping Repository Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-fastapi&#34;&gt;FastAPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-deployment-to-heroku&#34;&gt;Deployment to Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-conclusion-and-future-directions&#34;&gt;Conclusion and Future Directions&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&#34;justify&#34;&gt;
Python has great 3rd party packages for web scraping like &lt;a href=&#34;https://github.com/scrapy/scrapy&#34; target=‚Äù_blank‚Äù &gt;Scrapy&lt;/a&gt;, &lt;a href=&#34;https://pypi.org/project/beautifulsoup4/&#34; target=‚Äù_blank‚Äù &gt;BeautifulSoup&lt;/a&gt; or &lt;a href=&#34;https://github.com/psf/requests-html&#34; target=‚Äù_blank‚Äù &gt;Requests-HTML&lt;/a&gt; to name just a few. I will use BeautifulSoup and the &lt;a href=&#34;https://github.com/aio-libs/aiohttp&#34; target=‚Äù_blank‚Äù &gt;aiohttp&lt;/a&gt; package to perform asynchronous requests via the HTTP protocol. FastAPI has a nice built-in documentation and makes extensive use of pydantic which makes data parsing and validation pretty intuitive.
&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;1-scraping-repository-data&#34;&gt;1. Scraping Repository Data&lt;/h1&gt;
&lt;p&gt;At first I wrote some Python code to scrape the desired data. I saved a sample of the trending repositories HTML to avoid sending dozens of requests to Github. I use &lt;a href=&#34;https://github.com/httpie/httpie&#34; target=‚Äù_blank‚Äù &gt;HTTPie&lt;/a&gt; as HTTP client to perform requests via the terminal.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ http -b https://github.com/trending &amp;gt; repositories.html
$ wc repositories.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The HTML file has a size of 695 KB. The wordcount shows that ~710.000 characters are distributed over ~6000 lines. The file contains 25 repositories waiting for me to be scraped üôÇ. Each repository is enclosed by an article-tag.&lt;/p&gt;
&lt;p&gt;I opened the file from Python and tried to scrape the HTML document.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; bs4

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;repositories.html&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
    articles_html &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()

soup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bs4&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BeautifulSoup(articles_html, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lxml&amp;#34;&lt;/span&gt;)
articles &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  soup&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_all(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;article&amp;#34;&lt;/span&gt;, class_&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Box-row&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;number of articles: {len(articles)}&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After trying to scrape different repository data I realized that BeautifulSoup does not find all articles reliably. Some research revealed that others observed this as well. So I wrote a filter function as a workaround. This function filters all HTML out which is enclosed by the article-tags.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filter_articles&lt;/span&gt;(raw_html: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; str:

    raw_html &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; raw_html&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;# count num of article tags (varies from 0 to 50):&lt;/span&gt;
    article_tags_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    tag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;article&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; raw_html:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; tag &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line:
            article_tags_count &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# copy HTML enclosed by first and last article-tag:&lt;/span&gt;
    articles_arrays, is_article &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [], False
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; raw_html:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; tag &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line:
            article_tags_count &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            is_article &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_article:
            articles_arrays&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(line)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; article_tags_count:
            is_article &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(articles_arrays)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The now created &amp;lsquo;bs4.element.ResultSet&amp;rsquo; instances have always the expected length. Next we have to access the data within the soup and store them into a dictionary. The tags containing the desired data can be accessed using soups find-method or by going along the DOM tree via dot-notation. The latter is preferred performance-wise! Each repository is described by 12 properties. The function became quite lengthy, so I&amp;rsquo;ll show only a part of the function (scraping 4 properties).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scraping_repositories&lt;/span&gt;(
    matches: bs4&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;element&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ResultSet, 
    since: str
) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; typing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;List[typing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Dict]:

    trending_repositories &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; rank, match &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(matches):

        &lt;span style=&#34;color:#75715e&#34;&gt;# relative url&lt;/span&gt;
        rel_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;h1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;a[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;]

        &lt;span style=&#34;color:#75715e&#34;&gt;# name of repo&lt;/span&gt;
        repository_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rel_url&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]

        &lt;span style=&#34;color:#75715e&#34;&gt;# author (username):&lt;/span&gt;
        username &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rel_url&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]

        &lt;span style=&#34;color:#75715e&#34;&gt;# language and color&lt;/span&gt;
        progr_language &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;span&amp;#34;&lt;/span&gt;, itemprop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;programmingLanguage&amp;#34;&lt;/span&gt;)
            language &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; progr_language&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_text(strip&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
            lang_color_tag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; match&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;span&amp;#34;&lt;/span&gt;, class_&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;repo-language-color&amp;#34;&lt;/span&gt;)
            lang_color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lang_color_tag[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;style&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            lang_color, language &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None, None

        repositories &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rank&amp;#34;&lt;/span&gt;: rank &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;: username,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;repositoryName&amp;#34;&lt;/span&gt;: repository_name,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;language&amp;#34;&lt;/span&gt;: language,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;languageColor&amp;#34;&lt;/span&gt;: lang_color,
        }
        trending_repositories&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(repositories)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; trending_repositories
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For data about trending developers I have written a another scraping function. Ok, now that we can scrape the HTML, users have to be able to retrieve the data via a GET request.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;2-fastapi&#34;&gt;2. FastAPI&lt;/h1&gt;
&lt;p&gt;FastAPI makes building APIs a breeze. Here&amp;rsquo;s an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; fastapi
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; uvicorn

app &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fastapi&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FastAPI()

&lt;span style=&#34;color:#a6e22e&#34;&gt;@app.get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;(myArg: str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;: myArg}

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    uvicorn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(app, port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8000&lt;/span&gt;, host&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The path operation decorator &lt;code&gt;@app.get(&amp;quot;/&amp;quot;)&lt;/code&gt; handles requests that go to the &lt;code&gt;&amp;quot;/&amp;quot;&lt;/code&gt; route using a GET operation. The path operation function &lt;code&gt;index()&lt;/code&gt; let&amp;rsquo;s us handle query parameters. The code snippet contains an optional query parameter.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ http -b http://0.0.0.0:8000/?myArg=hello

{
    &amp;quot;data&amp;quot;: &amp;quot;hello&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We will create endpoints similar to the endpoints on Github. The programming language can be specified by a path parameter whereas the date range and the spoken language can be specified by an optional query parameter. Here&amp;rsquo;s an example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/c++?since=weekly&amp;amp;spoken_lang=de&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;FastAPI lets us define a set of allowed data which can be selected by the user. We have to create classes which contain the allowed properties and inherit from the &lt;code&gt;Enum&lt;/code&gt; class.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AllowedDateRanges&lt;/span&gt;(str, Enum):
    daily &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;daily&amp;#34;&lt;/span&gt;
    weekly &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;weekly&amp;#34;&lt;/span&gt;
    monthly &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;monthly&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When opening FastAPIs documentation we will see that only 3 options for the date range will be available:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://the-coding-lab.com/img/docs_parameters.png&#34; alt=&#34;allowed parameters&#34;&gt;&lt;/p&gt;
&lt;p&gt;The code for the routing will be written within a &lt;code&gt;main.py&lt;/code&gt; file. The path operation function accepts only allowed path parameters (programming languages) and optional query parameters (date ranges and spoken languages).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@app.get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/repositories/{prog_lang}&amp;#34;&lt;/span&gt;)
async &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trending_repositories_by_progr_language&lt;/span&gt;(
    since: AllowedDateRanges &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None,
):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dateRange&amp;#34;&lt;/span&gt;: since}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok, now I know how the endpoints should look like, but before the user can choose between different options at all, I have to make make the web scraping dynamic by requesting the desired HTML from Github instead of just opening a local HTML copy. Pythons well-known &lt;code&gt;requests&lt;/code&gt; module does the job. The goal is to let the user select between different parameters. The parameters of the request are redirected as payload to Github to receive the desired HTML.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests

payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;since&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;daily&amp;#39;&lt;/span&gt;, 
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;spoken_language_code&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;en&amp;#39;&lt;/span&gt;,
    }

prog_lang &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c++&amp;#39;&lt;/span&gt;

resp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://github.com/trending/{prog_lang}&amp;#34;&lt;/span&gt;, params&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;payload)
raw_html &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, I will put the 3 parts together: the user can request data of trending repositories. The shown path operation function gives us the ability to specify the search for trending repositories (by programming language, period of time and spoken language. These arguments are redirected as payload to request the desired HTML which is at last scraped and returned as JSON.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@app.get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/repositories/{prog_lang}&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trending_repositories_by_progr_language&lt;/span&gt;(
    prog_lang: AllowedProgrammingLanguages,
    since: AllowedDateRanges &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None,
    spoken_lang: AllowedSpokenLanguages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None,
):

    payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;since&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;daily&amp;#34;&lt;/span&gt;}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; since:
        payload[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;since&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; since&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_value_
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; spoken_lang:
        payload[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spoken_lang&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; spoken_lang&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_value_

    resp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://github.com/trending/{prog_lang}&amp;#34;&lt;/span&gt;, params&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;payload)
    raw_html &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text

    articles_html &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; filter_articles(raw_html)
    soup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; make_soup(articles_html)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; scraping_repositories(soup, since&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;payload[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;since&amp;#34;&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But how does the app perform? Professional tools like &lt;a href=&#34;https://httpd.apache.org/docs/2.4/programs/ab.html&#34;&gt;ApacheBench&lt;/a&gt; or &lt;a href=&#34;https://github.com/k6io/k6&#34;&gt;k6&lt;/a&gt; are commonly used to perform load testing, but in this case I wrote a small asynchronous script to bomb the application with requests. Comparing the performance of sync or async web apps without using async requests would be nonsense. I&amp;rsquo;ll call it &lt;code&gt;requests_benchmark.py&lt;/code&gt; and place it within the &lt;code&gt;tests/&lt;/code&gt; folder. Be aware that this is a rough comparison, I just want to illustrate the difference between synchronous and asynchronous code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; asyncio
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; aiohttp

URL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://127.0.0.1:8000/repositories/c++?since=weekly&amp;#34;&lt;/span&gt;
url_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list([URL] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;)

async &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch&lt;/span&gt;(session, url):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;requesting a url asynchronously&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    async &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; response:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; await response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;json()

async &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch_all&lt;/span&gt;(urls, loop):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;performaning multiple requests asynchronously&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    async &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; aiohttp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ClientSession(loop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;loop) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; session:
        results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; await asyncio&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gather(
            &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;[fetch(session, url) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; url &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; urls],
            return_exceptions&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True,
        )
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; results

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    t1_start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perf_counter()
    event_loop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; asyncio&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_event_loop()
    urls_duplicates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url_list
    htmls &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; event_loop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run_until_complete(
        fetch_all(urls_duplicates, event_loop),
    )
    t1_stop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;perf_counter()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;elapsed:&amp;#34;&lt;/span&gt;, t1_stop &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; t1_start)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I executed the script 3 times making 20 requests on each execution. Ok now lets replace the synchronous &lt;a href=&#34;https://github.com/psf/requests&#34;&gt;requests&lt;/a&gt; library by the asynchronous &lt;a href=&#34;https://github.com/aio-libs/aiohttp&#34;&gt;aiohttp&lt;/a&gt; library. Furthermore, we add the &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; keywords on the right positions. Our final code will look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@app.get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/repositories/{prog_lang}&amp;#34;&lt;/span&gt;)
async &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trending_repositories_by_progr_language&lt;/span&gt;(
    prog_lang: AllowedProgrammingLanguages,
    since: AllowedDateRanges &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None,
    spoken_language_code: AllowedSpokenLanguages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None,
):

    payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;since&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;daily&amp;#34;&lt;/span&gt;}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; since:
        payload[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;since&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; since&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; spoken_language_code:
        payload[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spoken_language_code&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; spoken_language_code&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value

    url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://github.com/trending/{prog_lang}&amp;#34;&lt;/span&gt;
    sem &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; asyncio&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Semaphore()
    async &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; sem:
        raw_html &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; await get_request(url, compress&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True, params&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;payload)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; isinstance(raw_html, str):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unable to connect to Github&amp;#34;&lt;/span&gt;

    articles_html &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; filter_articles(raw_html)
    soup &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; make_soup(articles_html)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; scraping_repositories(soup, since&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;payload[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;since&amp;#34;&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again three measurements were done using the &lt;code&gt;requests_benchmark.py&lt;/code&gt; script. The average of the measurements were calculated and the requests per second of synchronous and asynchronous code are compared as a barchart. The asynchronous code performs roughly twice as good.&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img alt=&#34;load test comparison: sync vs. async&#34; src=&#34;https://the-coding-lab.com/img/sync_vs_async_load.svg&#34;&gt;
&lt;/p&gt;
&lt;p&gt;Three more routes will be written to cover all trending repositories and developers. Our last task then is to deploy our application.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;3-deployment-to-heroku&#34;&gt;3. Deployment to Heroku&lt;/h1&gt;
&lt;p&gt;We&amp;rsquo;ll use Heroku which is an excellent Platform as a service (PaaS) cloud provider. To deploy our API to heroku we need a &lt;code&gt;heroku.yml&lt;/code&gt; file&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;build&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;docker&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;web&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Dockerfile&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;and a Dockerfile. For the docker image we use the lightweight linux-distribution alpine. This results in a 80Mb sized image which is built when executing the &lt;code&gt;docker build -t gh-trending-api .&lt;/code&gt; command. The &lt;code&gt;lxml&lt;/code&gt; package we use for the webscraping requires &lt;code&gt;libxml&lt;/code&gt;, a C-library. Therefore we need to compile C-code and thus building the docker container can take up to several minutes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Dockerfile&#34; data-lang=&#34;Dockerfile&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; python:3.9.2-alpine3.13&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LABEL&lt;/span&gt; maintainer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Niklas Tiede &amp;lt;niklastiede2@gmail.com&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /github-trending-api&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;COPY&lt;/span&gt; ./requirements-prod.txt .&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; apk add --update --no-cache --virtual .build-deps &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    g++ &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    libxml2 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    libxml2-dev &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    apk add libxslt-dev &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    pip install --no-cache-dir -r requirements-prod.txt &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    apk del .build-deps&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;COPY&lt;/span&gt; ./app ./app&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CMD&lt;/span&gt; uvicorn app.main:app --host 0.0.0.0 --port&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PORT&lt;span style=&#34;color:#66d9ef&#34;&gt;:-&lt;/span&gt;5000&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then we have to publish the port we defined in the &lt;code&gt;CMD&lt;/code&gt; instruction of the Dockerfile (port 5000) to the outside world. We have to map the containers port to a port on the docker host when running the container:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run -p 5000:5000 gh-trending-api:latest
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next we automate the deployment process using Github Actions. We create a &lt;code&gt;release_and_deploy.yaml&lt;/code&gt; file within a &lt;code&gt;.github/workflow/&lt;/code&gt; folder and place the following code. It contains the Github action &amp;ldquo;&lt;a href=&#34;https://github.com/marketplace/actions/deploy-to-heroku&#34;&gt;Deploy to Heroku&lt;/a&gt;&amp;rdquo; which will do the deployment for us.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;GH Release, Publishing to Docker and Deployment to Heroku&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;on&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;push&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;tags&lt;/span&gt;:
      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;v*.*.*&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;jobs&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;test&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;runs-on&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;heroku-deploy&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;runs-on&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/checkout@master&lt;/span&gt;
    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deploy on Heroku&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;akhileshns/heroku-deploy@v3.12.12&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;heroku_api_key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${{secrets.HEROKU_API_KEY}}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;heroku_app_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gh-trending-api&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;heroku_email&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;niklastiede2@gmail.com&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We copy the &lt;code&gt;HEROKU_API_KEY&lt;/code&gt; from Heroku&amp;rsquo;s account settings and save this as a secret in our Github repository so our Github action can access it. Now each time we push a tag of our project into the remote repository, this workflow kicks in. It pushes the project to Heroku which will build and run the docker container of our application. The URL of our app can be reached at &lt;a href=&#34;https://gh-trending-api.herokuapp.com/&#34;&gt;https://gh-trending-api.herokuapp.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Aaaand, thats it! We deployed a nice-looking API üòô&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;4-conclusion-and-future-directions&#34;&gt;4. Conclusion and Future Directions&lt;/h1&gt;
&lt;p&gt;Here is the full source code of the project: &lt;a href=&#34;https://github.com/NiklasTiede/Github-Trending-API&#34; target=‚Äù_blank‚Äù &gt;Github Trending API&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It took me 3 days to build this API. Another 2 days were needed to learn how to use Pythons &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; syntax. But using asynchronous code increased the performance not as much as I expected it to be. The scraping itself seems to be the bottleneck of the API, it&amp;rsquo;s kinda CPU intensive. I also found out that beautifulsoups performance is not that good. Using the &lt;code&gt;.find&lt;/code&gt; method is slower than going down the DOM tree by hand.&lt;/p&gt;
&lt;p&gt;If it turns out that this API would have a higher traffic in the future it could be interesting to implement a caching mechanism. Github updates the rankings of trending repositories only a few times per day so it would be more efficient to cache the most often used rankings in memory until Github updates it. This approach avoids repetitive requests and scraping the same data. It would be very interesting to implement a Redis database for this job.&lt;/p&gt;
&lt;p&gt;Ok guys, I hope you found something interesting, thanks for your attention and have a nice day!&lt;/p&gt;
</description> 
    </item>
    
    <item>
      <title>Publishing at Anaconda - 9/9</title>
      <link>https://the-coding-lab.com/2021/9-publishing-at-anaconda/</link>
      <pubDate>Thu, 25 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://the-coding-lab.com/2021/9-publishing-at-anaconda/</guid>
      <description>&lt;p&gt;Heya fellows,&lt;/p&gt;
&lt;p&gt;This is part 9 of the multi-part series &amp;ldquo;The Evolution of a Script&amp;rdquo;. The code of this post can be found on Github (see &lt;a href=&#34;https://github.com/NiklasTiede/tinyHTTPie/tree/9-Publishing-at-Anaconda&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;h4 id=&#34;contents&#34;&gt;Contents&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/1-the-evolution-of-a-script&#34;&gt;A Simple Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/2-sys-module&#34;&gt;Sys Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/3-argparse-module/&#34;&gt;Argparse Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/4-distribution-via-installation-script&#34;&gt;Distribution via Installation Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/5-distribution-via-setup-file&#34;&gt;Distribution via Setup File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/6-testing-and-continous-integration&#34;&gt;Testing and Continuous Integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/7-documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/8-publishing-at-pypi&#34;&gt;Publishing at PyPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/9-publishing-at-anaconda&#34;&gt;&lt;strong&gt;Publishing at Anaconda&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When a &lt;code&gt;setup.py&lt;/code&gt; file was already created, it&amp;rsquo;s pretty simple to go a step further and make an &lt;a href=&#34;https://anaconda.org&#34;&gt;Anaconda&lt;/a&gt; package. The metadata of the &lt;code&gt;setup.py&lt;/code&gt; file can be imported via jinja2 templating into the &lt;code&gt;meta.yml&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;% set data = load_setup_py_data() %}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tihttp&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: {{ &lt;span style=&#34;color:#ae81ff&#34;&gt;data[&amp;#39;version&amp;#39;] }}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;source&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;..&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;build&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;number&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;entry_points&lt;/span&gt;:
    {&lt;span style=&#34;color:#ae81ff&#34;&gt;% for entry_point in data[&amp;#39;entry_points&amp;#39;][&amp;#39;console_scripts&amp;#39;] %}&lt;/span&gt;
    - {{ &lt;span style=&#34;color:#ae81ff&#34;&gt;entry_point }}&lt;/span&gt;
    {&lt;span style=&#34;color:#ae81ff&#34;&gt;% endfor %}&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;python -m pip install --no-deps --ignore-installed .&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;requirements&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;build&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;python&lt;/span&gt;
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;pip&lt;/span&gt;
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;setuptools&lt;/span&gt;

  &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;python&lt;/span&gt;
    {&lt;span style=&#34;color:#ae81ff&#34;&gt;% for dep in data[&amp;#39;install_requires&amp;#39;] %}&lt;/span&gt;
    - {{ &lt;span style=&#34;color:#ae81ff&#34;&gt;dep.lower() }}&lt;/span&gt;
    {&lt;span style=&#34;color:#ae81ff&#34;&gt;% endfor %}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;test&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;imports&lt;/span&gt;:
    - {{ &lt;span style=&#34;color:#ae81ff&#34;&gt;data[&amp;#39;name&amp;#39;] }}&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;source_files&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;tests&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;requires&lt;/span&gt;:
    {&lt;span style=&#34;color:#ae81ff&#34;&gt;% for test_dep in data[&amp;#39;extras_require&amp;#39;][&amp;#39;dev&amp;#39;] %}&lt;/span&gt;
    - {{ &lt;span style=&#34;color:#ae81ff&#34;&gt;test_dep.lower() }}&lt;/span&gt;
    {&lt;span style=&#34;color:#ae81ff&#34;&gt;% endfor %}&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;commands&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;pytest tests&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;about&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;home&lt;/span&gt;: {{ &lt;span style=&#34;color:#ae81ff&#34;&gt;data[&amp;#39;url&amp;#39;] }}&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;license&lt;/span&gt;: {{ &lt;span style=&#34;color:#ae81ff&#34;&gt;data[&amp;#39;license&amp;#39;] }}&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;summary&lt;/span&gt;: {{ &lt;span style=&#34;color:#ae81ff&#34;&gt;data[&amp;#39;description&amp;#39;] }}&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;doc_source_url&lt;/span&gt;: {{ &lt;span style=&#34;color:#ae81ff&#34;&gt;data[&amp;#39;url&amp;#39;] + &amp;#39;/blob/master/README.md&amp;#39; }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can build the package.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ conda build .
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The generated file &lt;code&gt;tihttp-0.1.0-py37_0.tar.bz2&lt;/code&gt; can be found within the &lt;code&gt;anaconda3/conda-build/linux-64&lt;/code&gt; directory. To upload the package to the anaconda repository we have to register and then we can use the &lt;code&gt;anaconda upload&lt;/code&gt; command.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ anaconda upload home/niklas/anaconda3/conda-build/linux-64/tihttp-0.1.0-py37_0.tar.bz2

$ conda install -c niklastiede tihttp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But building and uploading packages for different Python interpreter versions and different operating systems is tedious. This work can be automated by a bash script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;~/anaconda3/bin:$PATH
pkg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tihttp&amp;#39;&lt;/span&gt;
array&lt;span style=&#34;color:#f92672&#34;&gt;=(&lt;/span&gt; 3.6 3.7 3.8 3.9 &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;# delete old built packages&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -d $HOME/conda-bld/ &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    rm -r $HOME/conda-bld/
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in $HOME/anaconda3/conda-bld/linux-64/$pkg*; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    echo $i
    rm $i
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Deleting old conda packages done!&amp;#34;&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;# building conda packages&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;array[@]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    echo $i
	conda build --py $i .
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Building conda packages done!&amp;#34;&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;# converting conda packages to other platforms&lt;/span&gt;
platforms&lt;span style=&#34;color:#f92672&#34;&gt;=(&lt;/span&gt; osx-64 linux-32 linux-64 win-32 win-64 &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; file in $HOME/anaconda3/conda-bld/linux-64/$pkg*; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    echo $file
    conda convert --platform all $file  -o $HOME/conda-bld/
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; platform in &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;platforms[@]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
        conda convert --platform $platform $file  -o $HOME/conda-bld/
    &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;converting packages to other platforms done!&amp;#34;&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;# uploading packages&lt;/span&gt;
find $HOME/conda-bld/**/$pkg*.tar.bz2 | &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; read file
&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    anaconda upload $file
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Uploading conda packages done!&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;
    &lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/8-publishing-at-pypi&#34;&gt;&lt;&lt; section 8&lt;/a&gt; | &lt;/p&gt;
&lt;/div&gt;
</description> 
    </item>
    
    <item>
      <title>Publishing at PyPI - 8/9</title>
      <link>https://the-coding-lab.com/2021/8-publishing-at-pypi/</link>
      <pubDate>Tue, 23 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://the-coding-lab.com/2021/8-publishing-at-pypi/</guid>
      <description>&lt;p&gt;Heya fellows,&lt;/p&gt;
&lt;p&gt;This is part 8 of the multi-part series &amp;ldquo;The Evolution of a Script&amp;rdquo;. The code of this post can be found on Github (see &lt;a href=&#34;https://github.com/NiklasTiede/tinyHTTPie/tree/8-Publishing-at-PyPI&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;h4 id=&#34;contents&#34;&gt;Contents&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/1-the-evolution-of-a-script&#34;&gt;A Simple Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/2-sys-module&#34;&gt;Sys Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/3-argparse-module/&#34;&gt;Argparse Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/4-distribution-via-installation-script&#34;&gt;Distribution via Installation Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/5-distribution-via-setup-file&#34;&gt;Distribution via Setup File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/6-testing-and-continous-integration&#34;&gt;Testing and Continuous Integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/7-documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/8-publishing-at-pypi&#34;&gt;&lt;strong&gt;Publishing at PyPI&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/9-publishing-at-anaconda&#34;&gt;Publishing at Anaconda&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ok, now people can download our project from github and use it. But in our daily work we use the Python Packaging Index to install things. So how do we release our package on PyPI? First we have to decide which versioning scheme we will use. Semantic versioning (&lt;a href=&#34;https://semver.org/&#34;&gt;semver.org&lt;/a&gt;) and calendar versioning (&lt;a href=&#34;https://calver.org/&#34;&gt;calver.org&lt;/a&gt;) are commonly used. We decide to use semantic versioning in the following. Github allows us to make images of our project (tags). Often the tagging corresponds with the package release on PyPI. So let&amp;rsquo;s first create a tag:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git add .
$ git commit -m &amp;quot;v1.0.0&amp;quot;
$ git tag !$
$ git push origin &amp;quot;v1.0.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Tags are a great opportunity to see a project in reverse at every stage of its development. Next we will generate a source distribution (.tar.gz) and a wheel distribution (.whl).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install wheel

$ python setup.py sdist bdist_wheel
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The generated files can be found within the &lt;code&gt;dist&lt;/code&gt; directory. Now we have to register at &lt;a href=&#34;https://pypi.org/&#34;&gt;PyPI&lt;/a&gt; before we can upload our project. For testing purposes it&amp;rsquo;s convenient to upload the project to &lt;a href=&#34;https://test.pypi.org/&#34;&gt;TestPyPI&lt;/a&gt; first. So, let&amp;rsquo;s do that.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install twine

$ twine upload --repository testpypi dist/*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now let&amp;rsquo;s test installing &lt;code&gt;tihttp&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install -i https://test.pypi.org/pypi/ --extra-index-url https://pypi.org/simple tihttp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Our tools works perfectly fine!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ tihttp -H google.com
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;And now that we are sure that everything works, it&amp;rsquo;s time to upload things to PyPI.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ twine upload --repository pypi dist/*

$ pip install tihttp
&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;
    &lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/7-documentation&#34;&gt;&lt;&lt; section 7&lt;/a&gt; | &lt;a href=&#34;https://the-coding-lab.com/2021/9-publishing-at-anaconda&#34;&gt;section 9 &gt;&gt;&lt;/a&gt; &lt;/p&gt;
&lt;/div&gt;
</description> 
    </item>
    
    <item>
      <title>Documentation - 7/9</title>
      <link>https://the-coding-lab.com/2021/7-documentation/</link>
      <pubDate>Fri, 19 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://the-coding-lab.com/2021/7-documentation/</guid>
      <description>&lt;p&gt;Heya fellows,&lt;/p&gt;
&lt;p&gt;This is part 7 of the multi-part series &amp;ldquo;The Evolution of a Script&amp;rdquo;. The code of this post can be found on Github (see &lt;a href=&#34;https://github.com/NiklasTiede/tinyHTTPie/tree/7-Documentation&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;h4 id=&#34;contents&#34;&gt;Contents&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/1-the-evolution-of-a-script&#34;&gt;A Simple Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/2-sys-module&#34;&gt;Sys Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/3-argparse-module/&#34;&gt;Argparse Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/4-distribution-via-installation-script&#34;&gt;Distribution via Installation Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/5-distribution-via-setup-file&#34;&gt;Distribution via Setup File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/6-testing-and-continous-integration&#34;&gt;Testing and Continuous Integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/7-documentation&#34;&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/8-publishing-at-pypi&#34;&gt;Publishing at PyPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/9-publishing-at-anaconda&#34;&gt;Publishing at Anaconda&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this post I wanna talk about a few dimensions of how to document a project in the python world. This makes it easier for the user or fellow developers to understand the project as a whole or separate parts of it. We will start at the lowest level and move toward higher abstraction levels.&lt;/p&gt;
&lt;h1 id=&#34;clean-self-descriptive-code&#34;&gt;Clean, Self-Descriptive Code&lt;/h1&gt;
&lt;p&gt;The lowest level of documentation is the code itself. The goal is to create readable and reusable software.  This can be achieved by adhering to a few principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Meaningful, pronounceable and consistent &lt;strong&gt;naming&lt;/strong&gt; of variables/functions/classes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Single-responsibility principle&lt;/strong&gt;: Each function fulfills only 1 purpose, same applies for classes/modules on a higher abstraction level.&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;static typing&lt;/strong&gt; for bigger projects, enforce type checking with &lt;a href=&#34;https://github.com/python/mypy&#34;&gt;mypy&lt;/a&gt;. Dynamic languages like Python make object identification difficult.&lt;/li&gt;
&lt;li&gt;Avoid reinventing the wheel and make good use of &lt;strong&gt;Python&amp;rsquo;s standard library&lt;/strong&gt;. A good developer uses existing code strategically to his advantage.&lt;/li&gt;
&lt;li&gt;Stick to a consistent style, I like &lt;a href=&#34;https://google.github.io/styleguide/pyguide.html&#34;&gt;&lt;strong&gt;Googles styleguide&lt;/strong&gt;&lt;/a&gt; for Python.&lt;/li&gt;
&lt;li&gt;Is the code elegant and pleasing? &lt;strong&gt;Listen to your intuition&lt;/strong&gt;, your subconscious will point to the right things.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;docstrings-comments-and-git-commit-messages&#34;&gt;Docstrings, Comments and Git Commit Messages&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; math
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__doc__
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;This module is always available.  It provides access to the&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mathematical functions defined by the C standard.&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Docstrings are string literals which occur as first statement in a function, class, method or module definition. The docstrings become the &lt;code&gt;__doc__&lt;/code&gt; special attribute of that object. They&amp;rsquo;re used to explain the general purpose of an object whereas comments explain smaller parts of the code. Comments are used to explain non-obvious portions of the code. Docstrings are surrounded by &lt;code&gt;&amp;quot;&amp;quot;&amp;quot;triple quotes&amp;quot;&amp;quot;&amp;quot;&lt;/code&gt; and divided into one-line or multi-line docstrings whereas comments starts with &lt;code&gt;#&lt;/code&gt; at the beginning.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;my_function&lt;/span&gt;():
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;This is a docstring&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; None

&lt;span style=&#34;color:#75715e&#34;&gt;# docstring of the function&lt;/span&gt;
my_function&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__doc__

&lt;span style=&#34;color:#75715e&#34;&gt;# displays documentation of the function&lt;/span&gt;
help(my_function)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are many docstring formats available. Most commonly used are NumPy, PyDoc and Googles docstring style. It&amp;rsquo;s a good idea to stick with a format which supports the Python documentation generator &lt;a href=&#34;https://github.com/sphinx-doc/sphinx&#34;&gt;Sphinx&lt;/a&gt;. This generates a part of your documentation automatically from your docstrings. The last section of this post will show how to generate and host documentation with Sphinx and &lt;a href=&#34;https://github.com/readthedocs/readthedocs.org&#34;&gt;readthedocs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A convenient VSCode extension is the &lt;a href=&#34;https://github.com/NilsJPWerner/autoDocstring&#34;&gt;Python Docstring Generator&lt;/a&gt; to facilitate the creation of docstrings.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;multiply&lt;/span&gt;(x: int, y: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;[summary]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Args:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        x (int): [description]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        y (int): [description]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Returns:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        int: [description]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It detects parameters automatically and you just have to fill out the marked fields. It uses the Google style by default.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Another source of documentation is available if the project has a Git history. A good git history gives you information about the reason for each code change. You can supercharge the git capabilities of VSCode by &lt;a href=&#34;https://github.com/eamodio/vscode-gitlens&#34;&gt;GitLens&lt;/a&gt; and you will see each commit message next to the code it was committed to.&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img width=&#34;690px&#34; src=&#34;https://the-coding-lab.com/img/gitlens_example.png&#34;&gt;
&lt;/p&gt;
&lt;p&gt;Furthermore, I like to use &lt;a href=&#34;https://github.com/carloscuesta/gitmoji&#34;&gt;gitmoji&lt;/a&gt; to make the reading of my commit messages visually more appealing and force myself to commit only code changes which fall into one category of the gitmojis.&lt;/p&gt;
&lt;h1 id=&#34;readme-files&#34;&gt;README Files&lt;/h1&gt;
&lt;p&gt;A nicely written README is the first document the visitor of a project will see. Here&amp;rsquo;s a screenshot of &lt;a href=&#34;https://github.com/thelounge/thelounge&#34;&gt;THELOUNGE&lt;/a&gt;, an IRC client for self-hosting:&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img width=&#34;500px&#34; src=&#34;https://the-coding-lab.com/img/beautiful_readme_example.png&#34;&gt;
&lt;/p&gt;
&lt;p&gt;What a beautiful README! What does it make so good?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It has a visually &lt;strong&gt;appealing and memorable logo&lt;/strong&gt; which is compatible with Github&amp;rsquo;s light and dark theme by using a transparent &lt;code&gt;.png&lt;/code&gt; picture.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;concise self-description&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Badges&lt;/strong&gt; from &lt;a href=&#34;https://shields.io/&#34;&gt;shields.io&lt;/a&gt; which visualize the quality of the project.&lt;/li&gt;
&lt;li&gt;Links to &lt;strong&gt;documentation&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;example&lt;/strong&gt;, here screenshot of the application when running.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;list of&lt;/strong&gt; contained &lt;strong&gt;features&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Often README files also contain instructions for the installation or a tutorial on how to use it. The READMEs file format is &lt;code&gt;.md&lt;/code&gt; (markdown) or &lt;code&gt;.rst&lt;/code&gt; (reStructuredText). Sometimes it&amp;rsquo;s also a good idea to provide examples to the user for certain, common use cases. Projects with a data scientific background tend to use jupyter notebooks (&lt;code&gt;.ipynb&lt;/code&gt;) to demonstrate the capabilities of the project. Other projects use plain python files for demonstration purposes.&lt;/p&gt;
&lt;h1 id=&#34;sphinx-documentation&#34;&gt;Sphinx Documentation&lt;/h1&gt;
&lt;p&gt;For smaller projects the &lt;code&gt;README.md&lt;/code&gt; can be sufficient whereas projects like libraries benefit from a more extensive hosted technical documentation. I will show you here how simple it is to create your own freely hosted documentation with &lt;a href=&#34;https://github.com/sphinx-doc/sphinx&#34;&gt;Sphinx&lt;/a&gt;, &lt;a href=&#34;https://readthedocs.org/&#34;&gt;readthedocs&lt;/a&gt; and &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;OK, let&amp;rsquo;s create some documentation! &lt;code&gt;Sphinx&lt;/code&gt; is the tool that will help us to simplify this process.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install sphinx

$ mkdir docs
$ cd docs
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Sphinx will ask us a couple of questions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sphinx-quickstart

&amp;gt; Separate source and build directories (y/n) [n]: y
&amp;gt; Project name: tinyHTTPie
&amp;gt; Author name(s): Niklas Tiede
&amp;gt; Project release []: 0.1.0
&amp;gt; Project language [en]: enter
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To create the documentation we have to use the &lt;code&gt;make html&lt;/code&gt; command within the &lt;code&gt;docs&lt;/code&gt; directory. This creates the HTML of our documentation.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd ..
$ make html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If we open the &lt;code&gt;index.html&lt;/code&gt; file with the browser via live server we can see how it will look like. But its appearance is pretty puristic yet. Therefore we use the popular &lt;code&gt;RTD&lt;/code&gt; theme to give it a professional look. We install the theme&amp;hellip;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install sphinx_rtd_theme
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;hellip;and customize the &lt;code&gt;conf.py&lt;/code&gt; file. We add the following lines:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sphinx_rtd_theme

extensions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sphinx_rtd_theme&amp;#34;&lt;/span&gt;,]
pygments_style &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sphinx&amp;#34;&lt;/span&gt;
version &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0.1.0&amp;#39;&lt;/span&gt;
html_theme &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sphinx_rtd_theme&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And render again.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ make html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now it looks way better! Ok, next we wanna write some more content. The documentation should be written in the reStructuredText (.rst) syntax. Here&amp;rsquo;s a nice &lt;a href=&#34;https://github.com/ralsina/rst-cheatsheet/blob/master/rst-cheatsheet.rst&#34;&gt;cheat sheet&lt;/a&gt;. A &lt;code&gt;.rst&lt;/code&gt; previewer in your IDE will speed up things. I&amp;rsquo;ve added some documentation about tinyHTTPie, see &lt;a href=&#34;https://github.com/NiklasTiede/tinyHTTPie/blob/7-Documentation/docs/source/index.rst&#34;&gt;index.rst&lt;/a&gt;, &lt;a href=&#34;https://github.com/NiklasTiede/tinyHTTPie/blob/7-Documentation/docs/source/install.rst&#34;&gt;install.rst&lt;/a&gt; and &lt;a href=&#34;https://github.com/NiklasTiede/tinyHTTPie/blob/7-Documentation/docs/source/tutorial.rst&#34;&gt;tutorial.rst&lt;/a&gt;. The last step is to publish our documentation. We have to register at &lt;a href=&#34;https://readthedocs.org/&#34;&gt;readthedocs.org&lt;/a&gt; and let it hook our repository.&lt;/p&gt;
&lt;p&gt;Voil√†! A nice &lt;a href=&#34;https://tinyhttpie.readthedocs.io/en/latest/&#34;&gt;documentation&lt;/a&gt; was created! I hope you see how easy it is to setup such a good-looking documentation and that documentation has so many interesting aspects we&amp;rsquo;re typically not aware of! üòÉ&lt;/p&gt;
&lt;div&gt;
    &lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/6-testing-and-continous-integration&#34;&gt;&lt;&lt; section 6&lt;/a&gt; | &lt;a href=&#34;https://the-coding-lab.com/2021/8-publishing-at-pypi&#34;&gt;section 8 &gt;&gt;&lt;/a&gt; &lt;/p&gt;
&lt;/div&gt;
</description> 
    </item>
    
    <item>
      <title>Testing and CI - 6/9</title>
      <link>https://the-coding-lab.com/2021/6-testing-and-continous-integration/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://the-coding-lab.com/2021/6-testing-and-continous-integration/</guid>
      <description>&lt;p&gt;Heya fellows,&lt;/p&gt;
&lt;p&gt;This is part 6 of the multi-part series &amp;ldquo;The Evolution of a Script&amp;rdquo;. The code of this post can be found on Github (see &lt;a href=&#34;https://github.com/NiklasTiede/tinyHTTPie/tree/6-Testing-and-CI&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;h4 id=&#34;contents&#34;&gt;Contents&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/1-the-evolution-of-a-script&#34;&gt;A Simple Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/2-sys-module&#34;&gt;Sys Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/3-argparse-module/&#34;&gt;Argparse Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/4-distribution-via-installation-script&#34;&gt;Distribution via Installation Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/5-distribution-via-setup-file&#34;&gt;Distribution via Setup File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/6-testing-and-continous-integration&#34;&gt;&lt;strong&gt;Testing and Continuous Integration&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/7-documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/8-publishing-at-pypi&#34;&gt;Publishing at PyPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/9-publishing-at-anaconda&#34;&gt;Publishing at Anaconda&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When projects grow a good test suite gives you confidence that new code you add don&amp;rsquo;t cause parts of the application to break. It improves the a projects maintainability of the project. The complexity of small projects is low and only necessary when the size of the project increases. But for the sake of this tutorial we will write a small test to demonstrate the usage of &lt;code&gt;pytest&lt;/code&gt;, &lt;code&gt;tox&lt;/code&gt; and &lt;code&gt;github actions&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We will store the tests within a separate folder. Here&amp;rsquo;s the current structure of the project.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;‚îú‚îÄ‚îÄ LICENSE
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ setup.py
‚îú‚îÄ‚îÄ tihttp.py
‚îú‚îÄ‚îÄ tests
‚îÇ  ‚îú‚îÄ‚îÄ __init__.py
‚îÇ  ‚îî‚îÄ‚îÄ test_tihttp.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We place a &lt;code&gt;test_tihttp.py&lt;/code&gt; file within the &lt;code&gt;tests&lt;/code&gt; folder. It will contains the test suite. The &lt;code&gt;main()&lt;/code&gt; function which contains the logic for triggering the flags has to be imported from the &lt;code&gt;tihttp.py&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tihttp &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; main

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_GET_body&lt;/span&gt;(capsys):
    main([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-B&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://jsonplaceholder.typicode.com/todos?userId=1&amp;#34;&lt;/span&gt;])
    captured &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; capsys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readouterr()
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; captured&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;out
    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tests/jsonplaceholder.json&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
        output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; output
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We compare the expected output with a request against an API. The API should return the same response so it will give us feedback if our application performs GET requests successfully. We place a &lt;code&gt;jsonplaceholder.json&lt;/code&gt; file into the same folder which contained the expected output. We let &lt;code&gt;pytest&lt;/code&gt; execute the test. We install it prior use.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install pytest
$ pytest
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Our test passes. To increase the tests verbosity &lt;code&gt;-v&lt;/code&gt; is a useful flag, furthermore I like to use &lt;code&gt;-s&lt;/code&gt; to see the captured output. Next we add pytest to our extra requirements in the &lt;code&gt;setup.py&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;extras_require&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dev&amp;#39;&lt;/span&gt;: [
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pytest&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# pip install tihttp[dev]&lt;/span&gt;
    ],
},
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This gives us the possibility to install extra dependencies (testing, linting tools etc.) easily by adding a &lt;code&gt;[dev]&lt;/code&gt; to the package name.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install .[dev]            # local install
$ pip install tihttp[dev]       # remote install, PyPI repo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We tested all of this with python 3.7.3. But how does our application behave when executed on a different interpreter version? So let&amp;rsquo;s test it against different Python versions! We use &lt;code&gt;tox&lt;/code&gt;. It let&amp;rsquo;s us run tests in multiple virtual envs.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install tox
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Tox needs a recipe to know which virtualenv/commands to create/execute. This recipe is named &lt;code&gt;tox.ini&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[tox]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;envlist&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;py36,py37,py38,py39&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;[testenv]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;deps&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    pytest&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;commands&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    pytest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If some of the Python interpreters are missing on your system, install them from the deadsnakes archive:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo add-apt-repository ppa:deadsnakes/ppa
$ sudo apt install python3.5 python3.6 python3.7 python3.8 python3.9
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now let&amp;rsquo;s test across different interpreters!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ tox
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you wanna test against a specific environment or execute only one file, then type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ tox -e py38
$ tox -e py38 -- test/main_test.py   # executes only a single test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ok, we did the test locally, but when working in a team using continuous integration is pretty convenient. We set a &lt;code&gt;integrate.yaml&lt;/code&gt; file up within a &lt;code&gt;.github/workflows&lt;/code&gt; directory to tell github actions what jobs to execute. The following github actions file will test across different platforms and Python versions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Python package&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;on&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;push]&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;jobs&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;runs-on&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${{ matrix.os }}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;strategy&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;matrix&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;python-version&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;3.6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.9&lt;/span&gt;]
        &lt;span style=&#34;color:#f92672&#34;&gt;os&lt;/span&gt;: [&lt;span style=&#34;color:#ae81ff&#34;&gt;ubuntu-latest, macos-latest, windows-latest]&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/checkout@v2&lt;/span&gt;
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Set up Python ${{ matrix.python-version }}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/setup-python@v2&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;python-version&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${{ matrix.python-version }}&lt;/span&gt;
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Cache pip&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/cache@v2&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;~/.cache/pip&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${{ runner.os }}-pip-${{ hashFiles(&amp;#39;requirements.txt&amp;#39;) }}&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;restore-keys&lt;/span&gt;: |&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            ${{ runner.os }}-pip-
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            ${{ runner.os }}-&lt;/span&gt;            
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Install dependencies&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: |&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          python -m pip install --upgrade pip
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          pip install flake8 pytest pytest-cov
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          pip install -r requirements.txt&lt;/span&gt;          
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Lint with flake8&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: |&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          # stop the build if there are Python syntax errors or undefined names
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics&lt;/span&gt;          
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Test with pytest&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: |&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          &lt;/span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;pytest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Don&amp;rsquo;t be intimidated by the length of this job. It&amp;rsquo;s just illustrating how powerful Github workflows can be. ü•∞&lt;/p&gt;
&lt;div&gt;
    &lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/5-distribution-via-setup-file&#34;&gt;&lt;&lt; section 5&lt;/a&gt; | &lt;a href=&#34;https://the-coding-lab.com/2021/7-documentation&#34;&gt;section 7 &gt;&gt;&lt;/a&gt; &lt;/p&gt;
&lt;/div&gt;
</description> 
    </item>
    
    <item>
      <title>Distribution via Setup File - 5/9</title>
      <link>https://the-coding-lab.com/2021/5-distribution-via-setup-file/</link>
      <pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://the-coding-lab.com/2021/5-distribution-via-setup-file/</guid>
      <description>&lt;p&gt;Heya fellows,&lt;/p&gt;
&lt;p&gt;This is part 5 of the multi-part series &amp;ldquo;The Evolution of a Script&amp;rdquo;. The code of this post can be found on Github (see &lt;a href=&#34;https://github.com/NiklasTiede/tinyHTTPie/tree/5-Distributing-by-Setup-File&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;h4 id=&#34;contents&#34;&gt;Contents&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/1-the-evolution-of-a-script&#34;&gt;A Simple Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/2-sys-module&#34;&gt;Sys Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/3-argparse-module/&#34;&gt;Argparse Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/4-distribution-via-installation-script&#34;&gt;Distribution via Installation Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/5-distribution-via-setup-file&#34;&gt;&lt;strong&gt;Distribution via Setup File&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/6-testing-and-continous-integration&#34;&gt;Testing and Continuous Integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/7-documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/8-publishing-at-pypi&#34;&gt;Publishing at PyPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/9-publishing-at-anaconda&#34;&gt;Publishing at Anaconda&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We have seen that it&amp;rsquo;s tedious and unclear how to distribute a project with a bash script. So I&amp;rsquo;ll show you in this post the way to go: using a &lt;code&gt;setup.py&lt;/code&gt; file! At first, we have to create a &lt;code&gt;setup.py&lt;/code&gt; file, put it into the root directory and then we can use &lt;code&gt;pip install .&lt;/code&gt; to install our project locally. This installs the project into the active virtual environment.&lt;/p&gt;
&lt;p&gt;But how does a &lt;code&gt;setup.py&lt;/code&gt; file looks like? Here&amp;rsquo;s a template containing the most important key-value pairs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; setuptools

setuptools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setup(
    name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tihttp&amp;#34;&lt;/span&gt;,
    version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.1.0&amp;#34;&lt;/span&gt;,

    package_dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;src&amp;#34;&lt;/span&gt;},
    packages&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;setuptools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_packages(where&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;src&amp;#34;&lt;/span&gt;),

    install_requires&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;requests&amp;gt;=2.21&amp;#34;&lt;/span&gt;,
    ],

    entry_points&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;console_scripts&amp;#34;&lt;/span&gt;:
        [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tihttp=tihttp.main:run_main&amp;#34;&lt;/span&gt;]
        },
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;package_dir&lt;/code&gt; and &lt;code&gt;packages&lt;/code&gt; values are necessary when a source layout is used, so that &lt;code&gt;setup.py&lt;/code&gt; knows where to look for the packages. We used here a source layout to show these key-values and how they affect the &lt;code&gt;entry_points&lt;/code&gt; section. The &lt;code&gt;entry_points&lt;/code&gt; section tells pip where the command line tool is invoked from.&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img alt=&#34;script entrypoint&#34; width=&#34;420px&#34; src=&#34;https://the-coding-lab.com/img/script_entrypoint.png&#34;&gt;
&lt;/p&gt;
&lt;p&gt;The command (in this case &lt;code&gt;tihttp&lt;/code&gt;) is mapped to the starting point of the command line tool (here the &lt;code&gt;run_main()&lt;/code&gt; function). Now &lt;code&gt;tihttp&lt;/code&gt; can be installed and the command should return a proper help interface.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install .

$ tihttp --help
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Another big advantage of this setup is that pip allows to install packages in editable mode:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install -e .
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Your project is then installed into your currently activated virtual environment and every change to the code immediately affects this installed dependency. This allows to continue developing while testing the package comfortably. Furthermore, the &lt;code&gt;setup.py&lt;/code&gt; file allows to download and install your project directly from github.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install https://github.com/NiklasTiede/tinyHTTPie/archive/5-Distributing-by-Setup-File.zip
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Direct installations from github can take time especially for projects which are bigger (large git history) and use non-Python languages. Therefore PyPI and Anaconda are usually the preferred places to go for installing packages.&lt;/p&gt;
&lt;p&gt;I want to note that many developers in the python community store project metadata and settings used for linting/testing within a &lt;code&gt;setup.cfg&lt;/code&gt; file instead of a &lt;code&gt;setup.py&lt;/code&gt; file but this is a topic for another post.&lt;/p&gt;
&lt;div&gt;
    &lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/4-distribution-via-installation-script&#34;&gt;&lt;&lt; section 4&lt;/a&gt; | &lt;a href=&#34;https://the-coding-lab.com/2021/6-testing-and-continous-integration&#34;&gt;section 6 &gt;&gt;&lt;/a&gt; &lt;/p&gt;
&lt;/div&gt;
</description> 
    </item>
    
    <item>
      <title>Distribution via Installation Script - 4/9</title>
      <link>https://the-coding-lab.com/2021/4-distribution-via-installation-script/</link>
      <pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://the-coding-lab.com/2021/4-distribution-via-installation-script/</guid>
      <description>&lt;p&gt;Heya fellows,&lt;/p&gt;
&lt;p&gt;This is part 4 of the multi-part series &amp;ldquo;The Evolution of a Script&amp;rdquo;. The code of this post can be found on Github (see &lt;a href=&#34;https://github.com/NiklasTiede/tinyHTTPie/tree/4-Distributing-by-Installscript&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;h4 id=&#34;contents&#34;&gt;Contents&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/1-the-evolution-of-a-script&#34;&gt;A Simple Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/2-sys-module&#34;&gt;Sys Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/3-argparse-module/&#34;&gt;Argparse Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/4-distribution-via-installation-script&#34;&gt;&lt;strong&gt;Distribution via Installation Script&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/5-distribution-via-setup-file&#34;&gt;Distribution via Setup File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/6-testing-and-continous-integration&#34;&gt;Testing and Continuous Integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/7-documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/8-publishing-at-pypi&#34;&gt;Publishing at PyPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/9-publishing-at-anaconda&#34;&gt;Publishing at Anaconda&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We created a useful tool, but wouldn&amp;rsquo;t it be nice if we could make it accessible to others? So let&amp;rsquo;s share it! At first, we have to make a snapshot of our virtual environment.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Thereafter we create a new Git repository and push it to Github!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo &amp;quot;# tinyHTTPie&amp;quot; &amp;gt;&amp;gt; README.md
$ git init
$ git add .
$ git commit -m &amp;quot;first commit&amp;quot;
$ git branch -M main
$ git remote add origin https://github.com/NiklasTiede/tinyHTTPie.git
$ git push -u origin main
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now others will be able to download our project using the &lt;code&gt;clone&lt;/code&gt; command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/NiklasTiede/tinyHTTPie.git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now they have to rebuild it by recreating the virtual environment, extracting the Python interpreter path, adding a shebang line to the script and an alias to &lt;code&gt;.bashrc&lt;/code&gt;. Quite laborious. A bash script automates this process!&lt;/p&gt;
&lt;p&gt;I store all my scripts within a &lt;code&gt;MyScripts&lt;/code&gt; folder so the bash script will create it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; ! -d ~/MyScripts &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    mkdir ~/MyScripts
    folder1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;~/MyScripts
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;folder1&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; was generated.&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; ! -d ~/MyScripts/tinyHTTPie &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    mkdir ~/MyScripts/tinyHTTPie
    folder2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;~/MyScripts/tinyHTTPie
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;folder2&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; was generated.&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then the &lt;code&gt;tihttp.p&lt;/code&gt;y and &lt;code&gt;requirements.txt&lt;/code&gt; will be copied.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;PWD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;pwd&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
REQUIREMENTS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$PWD&lt;span style=&#34;color:#e6db74&#34;&gt;/requirements.txt&amp;#34;&lt;/span&gt;
SCRIPT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$PWD&lt;span style=&#34;color:#e6db74&#34;&gt;/tihttp.py&amp;#34;&lt;/span&gt;
TARGET&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;~/MyScripts/tinyHTTPie

cp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$REQUIREMENTS&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$TARGET&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
cp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$SCRIPT&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$TARGET&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
cd ~/MyScripts/tinyhttp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Python interpreter version is checked.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;PYVER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;python --version&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
CURRENT_PY_VERSION&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PYVER:7:11&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
testvercomp &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CURRENT_PY_VERSION&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; 3.0.0 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;echo $CURRENT_PY_VERSION | grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2.&amp;#39;&lt;/span&gt;*&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;first digit is 2, you&amp;#39;re python version is too low&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;echo $CURRENT_PY_VERSION | grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;3.&amp;#39;&lt;/span&gt;*&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;first digit is 3, you&amp;#39;re python versions fulfills the requirements!&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;pipenv&lt;/code&gt; will be installed if it is not yet installed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; ! &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;pipenv&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pipenv not existent, so installing via pip...&amp;#34;&lt;/span&gt;
    pip install pipenv
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;...pipenv was installed?&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The virtual environment will be rebuilt.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pipenv install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The shebang line is added.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pybin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;pipenv --py&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
echo -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#\!&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;pybin&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;cat tinyhttp.py.py&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &amp;gt; tinyhttp.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The shebang is checked.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;EXIS_HEADLINE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;head -n &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; tinyhttp.py&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
EXP_HEADLINE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#!&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;pybin&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; $EXIS_HEADLINE &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; $EXP_HEADLINE &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${#&lt;/span&gt;EXIS_HEADLINE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${#&lt;/span&gt;EXP_HEADLINE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shebang line was added correctly!&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; $EXIS_HEADLINE !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $EXP_HEADLINE &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${#&lt;/span&gt;EXIS_HEADLINE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${#&lt;/span&gt;EXP_HEADLINE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shebang was NOT added correctly!&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;File permissions are given.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;chmod +x ~/MyScripts/tiniHTTP/tiny_HTTPie_clone.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The script adds the alias to the configuration file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;SHELL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;printenv SHELL&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
MYSHELL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;SHELL:5:10&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
ALIASFILE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;~/.bashrc

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; $MYSHELL  &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zsh&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You&amp;#39;re default shell is ZSH.&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -e ~/.aliases &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
        ALIASFILE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;~/.aliases
        echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You&amp;#39;re storing your files within the .aliases file.&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -e ~/.zshrc &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
        ALIASFILE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;~/.zshrc
        echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You&amp;#39;re storing your files within the .zshrc file.&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; $MYSHELL  &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bash&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You&amp;#39;re default shell is BASH.&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -e ~/.aliases &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
        ALIASFILE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;~/.aliases
        echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You&amp;#39;re storing your files within the .aliases file.&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; -e ~/.bashrc &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
        ALIASFILE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;~/.bashrc
        echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You&amp;#39;re storing your files within the .bashrc file.&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And thats it! Puh, pretty much work and it&amp;rsquo;s still pretty prone to errors (adding the script to the PATH instead of using an alias would make things less error prone). But there&amp;rsquo;s a better solution to distribute packages in a standardized way: writing a &lt;code&gt;setup.py&lt;/code&gt; file!&lt;/p&gt;
&lt;div&gt;
    &lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/3-argparse-module/&#34;&gt;&lt;&lt; section 3&lt;/a&gt; | &lt;a href=&#34;https://the-coding-lab.com/2021/5-distribution-via-setup-file&#34;&gt;section 5 &gt;&gt;&lt;/a&gt; &lt;/p&gt;
&lt;/div&gt;
</description> 
    </item>
    
    <item>
      <title>Argparse Module - 3/9</title>
      <link>https://the-coding-lab.com/2021/3-argparse-module/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://the-coding-lab.com/2021/3-argparse-module/</guid>
      <description>&lt;p&gt;Heya fellows,&lt;/p&gt;
&lt;p&gt;This is part 3 of the multi-part series &amp;ldquo;The Evolution of a Script&amp;rdquo;. The code of this post can be found on Github (see &lt;a href=&#34;https://github.com/NiklasTiede/tinyHTTPie/tree/3-Argparse-Module&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;h4 id=&#34;contents&#34;&gt;Contents&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/1-the-evolution-of-a-script&#34;&gt;A Simple Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/2-sys-module&#34;&gt;Sys Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/3-argparse-module/&#34;&gt;&lt;strong&gt;Argparse Module&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/4-distribution-via-installation-script&#34;&gt;Distribution via Installation Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/5-distribution-via-setup-file&#34;&gt;Distribution via Setup File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/6-testing-and-continous-integration&#34;&gt;Testing and Continuous Integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/7-documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/8-publishing-at-pypi&#34;&gt;Publishing at PyPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/9-publishing-at-anaconda&#34;&gt;Publishing at Anaconda&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One of the big benefits of using argparse is that it generates a usage help (a &lt;code&gt;--help&lt;/code&gt; flag) automatically. It&amp;rsquo;s common practice to separate the events which are triggered by flags from the creation of the argumentparser. Here&amp;rsquo;s a argparse template I often use.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; argparse

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(argv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None):

    parser &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; build_parser()
    args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse_args(argv)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arg_name:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;build_parser&lt;/span&gt;():
    parser &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; argparse&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ArgumentParser()

    &lt;span style=&#34;color:#75715e&#34;&gt;# positional/optional arguments:&lt;/span&gt;
    parser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_argument()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; parser

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run_main&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit(main())
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:
        sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stderr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(e)
        sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    run_main()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you&amp;rsquo;re wondering where the arguments from outside are passed into the script: the default value of the &lt;code&gt;argv&lt;/code&gt; identifier is None. Argparse knows then internally that it has to use the arguments from outside.&lt;/p&gt;
&lt;p&gt;When converting our script into an argparse tool we can throw all the logic away which informs the user about incorrect usage. All this is now done by &lt;code&gt;argparse&lt;/code&gt;! We wrap argparse around our script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; argparse
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; collections
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(argv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None):
    parser &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; build_parser()
    args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse_args(argv)

    url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;URL:
        url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;URL

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://www.&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; url:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; url[:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;www.&amp;#39;&lt;/span&gt;:
            url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:]
        url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; url

    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        resp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exceptions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RequestException &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Response Failed.&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

    header &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict(collections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;OrderedDict(resp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;headers))
    body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; section &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sorted(header&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items()):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{section[0]}: {section[1]}&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(body)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;build_parser&lt;/span&gt;():
    parser &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; argparse&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ArgumentParser(
        prog&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tihttp&amp;#39;&lt;/span&gt;,
        description&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A tiny HTTP client for sending GET requests.&amp;#39;&lt;/span&gt;
    )

    parser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_argument(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;URL&amp;#39;&lt;/span&gt;,action&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;store&amp;#39;&lt;/span&gt;,)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; parser


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run_main&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit(main())
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:
        sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stderr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(e)
        sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)


&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    run_main()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Adding the &lt;code&gt;-H&lt;/code&gt;, &lt;code&gt;-B&lt;/code&gt; flags and the boolean logic returns a more sophisticated version of our script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; argparse
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; collections
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(argv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None):
    parser &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; build_parser()
    args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse_args(argv)

    url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;URL:
        url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;URL

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://www.&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; url:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; url[:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;www.&amp;#39;&lt;/span&gt;:
            url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:]
        url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; url

    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        resp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exceptions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RequestException &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Response Failed.&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

    header &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict(collections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;OrderedDict(resp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;headers))
    body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;body &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;header:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(body)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;header &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;body:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; section &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sorted(header&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items()):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{section[0]}: {section[1]}&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;header &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;body) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;header &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;body):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; section &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sorted(header&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items()):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{section[0]}: {section[1]}&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(body)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;build_parser&lt;/span&gt;():
    parser &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; argparse&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ArgumentParser(
        prog&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tihttp&amp;#39;&lt;/span&gt;,
        description&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A tiny HTTP client for sending GET requests.&amp;#39;&lt;/span&gt;
    )

    &lt;span style=&#34;color:#75715e&#34;&gt;# positional arguments:&lt;/span&gt;
    parser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_argument(
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;URL&amp;#39;&lt;/span&gt;,
    action&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;store&amp;#39;&lt;/span&gt;,
    )

    &lt;span style=&#34;color:#75715e&#34;&gt;# optional arguments:&lt;/span&gt;
    parser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_argument(
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-H&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;--header-only&amp;#39;&lt;/span&gt;,
    dest&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;header&amp;#39;&lt;/span&gt;,
    action&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;store_true&amp;#39;&lt;/span&gt;,
    help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Prints only the header of the Response.&amp;#39;&lt;/span&gt;)

    parser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_argument(
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-B&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;--body-only&amp;#39;&lt;/span&gt;,
    dest&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;,
    action&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;store_true&amp;#39;&lt;/span&gt;,
    help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Prints only the body of the Response.&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; parser


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run_main&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit(main())
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:
        sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stderr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(e)
        sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)


&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    run_main()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Adding the help flag returns now a nicely formatted usage help!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ tihttp --help

usage: tihttp [-h] [-H] [-B] URL

A tiny HTTP client for sending GET and POST requests.

positional arguments:
  URL

optional arguments:
  -h, --help         show this help message and exit
  -H, --header-only  Prints only the header of the Response.
  -B, --body-only    Prints only the body of the Response.
&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;
    &lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/2-sys-module&#34;&gt;&lt;&lt; section 2&lt;/a&gt; | &lt;a href=&#34;https://the-coding-lab.com/2021/4-distribution-via-installation-script&#34;&gt;section 4 &gt;&gt;&lt;/a&gt; &lt;/p&gt;
&lt;/div&gt;
</description> 
    </item>
    
    <item>
      <title>Sys Module - 2/9</title>
      <link>https://the-coding-lab.com/2021/2-sys-module/</link>
      <pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://the-coding-lab.com/2021/2-sys-module/</guid>
      <description>&lt;p&gt;Heya fellows,&lt;/p&gt;
&lt;p&gt;This is part 2 of the multi-part series &amp;ldquo;The Evolution of a Script&amp;rdquo;. The code of this post can be found on Github (see &lt;a href=&#34;https://github.com/NiklasTiede/tinyHTTPie/tree/2-Sys-Module&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;h4 id=&#34;contents&#34;&gt;Contents&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/1-the-evolution-of-a-script&#34;&gt;A Simple Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/2-sys-module&#34;&gt;&lt;strong&gt;Sys Module&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/3-argparse-module/&#34;&gt;Argparse Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/4-distribution-via-installation-script&#34;&gt;Distribution via Installation Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/5-distribution-via-setup-file&#34;&gt;Distribution via Setup File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/6-testing-and-continous-integration&#34;&gt;Testing and Continuous Integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/7-documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/8-publishing-at-pypi&#34;&gt;Publishing at PyPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/9-publishing-at-anaconda&#34;&gt;Publishing at Anaconda&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The sys modules &lt;code&gt;sys.argv&lt;/code&gt; is a list that gives us access to all command line arguments passed to the Python script. This gives us the ability to make our script more flexible. We can now change the URL we would like to request by passing an argument to the script. The first element of sys.argv (&lt;code&gt;sys.argv[0]&lt;/code&gt;) is the scripts name.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; collections
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys

url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]

r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url)

header &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict(collections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;OrderedDict(resp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;headers))
body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; section &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sorted(header&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items()):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{section[0]}: {section[1]}&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To test our changes we type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ tihttp https://the-coding-lab.com/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Success! Our tools feels now way more like a real command line app!&lt;/p&gt;
&lt;p&gt;Ok, next let&amp;rsquo;s make our tool more user friendly by improving error handling. We&amp;rsquo;re used to enter a URL without schema, but every browser uses the HTTP method as its default scheme. So this is what we would like to implement for our tool.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; collections

url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://www.&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; url:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; url[:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;www.&amp;#39;&lt;/span&gt;:
        url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:]
    url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; url

resp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url)

header &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict(collections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;OrderedDict(resp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;headers))
body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; section &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sorted(header&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items()):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{section[0]}: {section[1]}&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok. But even if the URL was typed correctly several errors when communicating with the server can happen. The status code (3 digit number) returned will give us more information about why the error occurred. The first digit represents the class. The responses are grouped in 5 classes.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Status Code&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Class&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;Success&lt;/td&gt;
&lt;td&gt;Successful Responses&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;301&lt;/td&gt;
&lt;td&gt;Moved Permanently&lt;/td&gt;
&lt;td&gt;Redirects&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;302&lt;/td&gt;
&lt;td&gt;Moved Temporarily&lt;/td&gt;
&lt;td&gt;Redirects&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;304&lt;/td&gt;
&lt;td&gt;Not modified&lt;/td&gt;
&lt;td&gt;Redirects&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;Bad request&lt;/td&gt;
&lt;td&gt;Client Error&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;401&lt;/td&gt;
&lt;td&gt;Unauthorized&lt;/td&gt;
&lt;td&gt;Client Error&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;403&lt;/td&gt;
&lt;td&gt;Forbidden&lt;/td&gt;
&lt;td&gt;Client Error&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;404&lt;/td&gt;
&lt;td&gt;Not found&lt;/td&gt;
&lt;td&gt;Client Error&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;Internal Server Error&lt;/td&gt;
&lt;td&gt;Server Error&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;These errors are handled using Python&amp;rsquo;s exceptions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; collections
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys


input_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://www.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; input_url:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; input_url[:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;www.&amp;#39;&lt;/span&gt;:
        input_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input_url[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:]
    input_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; input_url

&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url)
&lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exceptions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RequestException &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Response Failed.&amp;#39;&lt;/span&gt;)

header &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict(collections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;OrderedDict(resp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;headers))
body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; section &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sorted(header&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items()):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{section[0]}: {section[1]}&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So good, so far. But what if a user of the tool types too many arguments or no URL at all accidentally? We have to advise our script to handle these use cases! Boolean logic solves this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; collections
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys

arg_array &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]
input_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
body_bool, header_bool &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False, False

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(arg_array) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Too many arguments.&amp;#39;&lt;/span&gt;)
    sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(arg_array) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
    input_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arg_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; input_url:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;No URL was given.&amp;#39;&lt;/span&gt;)
    sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://www.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; input_url:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; input_url[:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;www.&amp;#39;&lt;/span&gt;:
        input_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input_url[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:]
    input_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; input_url

&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(input_url)
&lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exceptions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RequestException &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Response Failed.&amp;#39;&lt;/span&gt;)
header &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict(collections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;OrderedDict(resp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;headers))
body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; section &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sorted(header&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items()):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{section[0]}: {section[1]}&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now let&amp;rsquo;s add some options. It would be nice if the user could decide if we he wants to print only the header or the body of the response. Usually command line tools use flags to give options. We will use a &lt;code&gt;-H&lt;/code&gt; flag to display only the header and &lt;code&gt;-B&lt;/code&gt; flag to display only the body.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; collections
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys

arg_array, input_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
body_bool, header_bool &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False, False

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-b&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; arg_array:
    arg_array&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;remove(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-b&amp;#39;&lt;/span&gt;)
    body_bool &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-h&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; arg_array:
    arg_array&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;remove(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-h&amp;#39;&lt;/span&gt;)
    header_bool &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(arg_array) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Too many arguments&amp;#39;&lt;/span&gt;)
    sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(arg_array) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
    input_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arg_array[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; input_url:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;No URL was given&amp;#39;&lt;/span&gt;)
    sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://www.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; input_url:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; input_url[:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;www.&amp;#39;&lt;/span&gt;:
        input_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input_url[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:]
    input_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://www.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; input_url

&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(input_url)
&lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exceptions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RequestException &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Response Failed.&amp;#39;&lt;/span&gt;)
header &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict(collections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;OrderedDict(resp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;headers))
body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; body_bool &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; header_bool:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(body)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; header_bool &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; body_bool:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; section &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sorted(header&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items()):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{section[0]}: {section[1]}&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (body_bool &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; header_bool) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; body_bool &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; header_bool):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; section &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sorted(header&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items()):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{section[0]}: {section[1]}&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(body)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some testing proves that we can use now two options:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ tihttp -H https://the-coding-lab.com/
$ tihttp -B https://the-coding-lab.com/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We see that it can become quite tedious to add more functionality when limiting ourself to the&lt;code&gt; sys&lt;/code&gt; module. It needs alot of boolean logic. But Python has a library only for creating command line interfaces: &lt;code&gt;argparse&lt;/code&gt;!&lt;/p&gt;
&lt;div&gt;
    &lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/1-the-evolution-of-a-script&#34;&gt;&lt;&lt; section 1&lt;/a&gt; | &lt;a href=&#34;https://the-coding-lab.com/2021/3-argparse-module/&#34;&gt;section 3 &gt;&gt;&lt;/a&gt; &lt;/p&gt;
&lt;/div&gt;
</description> 
    </item>
    
    <item>
      <title>The Evolution of a Script - 1/9</title>
      <link>https://the-coding-lab.com/2021/1-the-evolution-of-a-script/</link>
      <pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://the-coding-lab.com/2021/1-the-evolution-of-a-script/</guid>
      <description>&lt;p&gt;Heya fellows,&lt;/p&gt;
&lt;p&gt;This is part 1 of the multi-part series &amp;ldquo;The Evolution of a Script&amp;rdquo;. The code of this post can be found on Github (see &lt;a href=&#34;https://github.com/NiklasTiede/tinyHTTPie/tree/1-Simple-Script&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;h4 id=&#34;contents&#34;&gt;Contents&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/1-the-evolution-of-a-script&#34;&gt;&lt;strong&gt;A Simple Script&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/2-sys-module&#34;&gt;Sys Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/3-argparse-module/&#34;&gt;Argparse Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/4-distribution-via-installation-script&#34;&gt;Distribution via Installation Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/5-distribution-via-setup-file&#34;&gt;Distribution via Setup File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/6-testing-and-continous-integration&#34;&gt;Testing and Continuous Integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/7-documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/8-publishing-at-pypi&#34;&gt;Publishing at PyPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-coding-lab.com/2021/9-publishing-at-anaconda&#34;&gt;Publishing at Anaconda&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When I started out my Journey of learning to code I went through dozens of tutorials, I rewrote many algorithms and played with several kinds of topics. During this time I was pretty busy learning Python&amp;rsquo;s basic syntax, its standard libraries and other third party packages. &amp;ldquo;You have to know which tools you can use before you&amp;rsquo;re able to create new tools&amp;rdquo; I said to myself. So I kept myself busy with learning about computer science basics and discovering frameworks, libraries and commands line apps.&lt;/p&gt;
&lt;!-- ![cute tortoise](/img/tortoise.jpg) --&gt;
&lt;p&gt;It took me 8 month before I started to discover Github. What a phenomenal mistake of mine! Github has such a great community, people create so much admirable work, it&amp;rsquo;s so interesting to discover/use or play with other peoples projects! It took me some time to understand Python&amp;rsquo;s packaging (I really underestimated the packaging part!). So in the following I would like to take you with me on a journey of writing and releasing a tiny command line app. We will see how a simple script grows and goes through different stages of its development cycle. Some scripts of mine grow, some are just executed as plain script files. I collect these within a folder on my machine (see: &lt;a href=&#34;https://github.com/NiklasTiede/Python-Scripts-Collection&#34;&gt;Collection of Python Scripts&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Exploring the web through the command line is a fascinating experience. We will use the &lt;code&gt;requests&lt;/code&gt; library to create a little &lt;a href=&#34;https://github.com/httpie/httpie&#34;&gt;HTTPie&lt;/a&gt; clone. HTTP clients are used to test how an API behaves when sending GET and POST requests to it.&lt;/p&gt;
&lt;h1 id=&#34;1-a-simple-script&#34;&gt;1. A Simple Script&lt;/h1&gt;
&lt;p&gt;First we will create a simple script which can perform GET requests. I keep all my scripts within a &lt;code&gt;MyScripts&lt;/code&gt; folder. Then I create a project folder, and a virtual environment using &lt;code&gt;pipenv&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd ~/MyScripts
$ mkdir tinyHTTPie
$ cd tinyHTTPie

$ pipenv --python 3.7
$ pipenv shell
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then we have to create our project file and install dependencies:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ touch tihttp.py
$ pip install requests
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Lets write our script. We want to print the header of the response. I used the &lt;code&gt;OrderedDict&lt;/code&gt; object imported from the &lt;code&gt;collections&lt;/code&gt; library to sort the keys of the dictionary.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; collections

resp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://the-coding-lab.com/&amp;#39;&lt;/span&gt;)

header &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict(collections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;OrderedDict(resp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;headers))
body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; section &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sorted(header&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items()):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{section[0]}: {section[1]}&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When we execute the script&amp;hellip;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ python tihttp.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;hellip;the metadata of the request are returned successfully.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;Accept-Ranges: bytes
Access-Control-Allow-Origin: *
Age: 124
Cache-Control: max-age=600
Connection: keep-alive
Content-Encoding: gzip
Content-Length: 5764
Content-Type: text/html; charset=utf-8
Date: Tue, 16 Feb 2021 14:39:59 GMT
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But when you realize that a script of yours is pretty useful, you might think &amp;ldquo;How could I turn this script into an easy-to-use command?&amp;rdquo;. At first, you have to add a shebang line to stick the scripts virtual environment to it permanently. The &lt;code&gt;which python&lt;/code&gt; command or &lt;code&gt;pipenv --py&lt;/code&gt; will return the path to the Python interpreter of the virtual environment. It will look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/home/niklas/.local/share/virtualenvs/tinyHTTPie-iqhOkNUA/bin/python ~/tinyHTTPie/tihttp.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now this path has to be added to the head of the script as a shebang line. We can do this from the command line.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pybin=$(pipenv --py)
$ echo -e &amp;quot;#\!${pybin}\n\n$(cat tihttp.py)&amp;quot; &amp;gt; tihttp.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The head of the file should look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/home/niklas/.local/share/virtualenvs/tiny-HTTPie-clone-iqhOkNUA/bin/python&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To make the script executable we have to give permissions. Then we can just type the path to the script and it will be interpreted by the specified Python interpreter.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ chmod +x tiny_HTTPie_clone.py
$ ./tihttp.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Giving the path an alias will make it easier for us to remember/use our tool. To allow us to use the alias in every new shell session, we add it to the &lt;code&gt;.bashrc&lt;/code&gt; file (or wherever you&amp;rsquo;re storing your aliases).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo &amp;quot;\nalias tihttp=&#39;~/MyScripts/tiny_HTTPie_clone.py&#39;&amp;quot; &amp;gt;&amp;gt; ~/.bashrc
$ source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you can call your script in each new shell session no matter where you are on the filesystem.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ tihttp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But there is still a problem: every time our tools sends a GET request to a website we have to change the URL by opening the file, changing the URL, saving and executing it. Would it not be nicer to add the URL as argument to our &lt;code&gt;tihttp&lt;/code&gt; command? Python&amp;rsquo;s &lt;code&gt;sys&lt;/code&gt; module from the standard library comes here to our rescue!&lt;/p&gt;
&lt;div&gt;
&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://the-coding-lab.com/2021/2-sys-module&#34;&gt;section 2 &gt;&gt;&lt;/a&gt; &lt;/p&gt;
&lt;/div&gt;
</description> 
    </item>
    
    <item>
      <title>About</title>
      <link>https://the-coding-lab.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://the-coding-lab.com/about/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://the-coding-lab.com/img/in_den_bergen.jpg&#34; alt=&#34;cute tortoise&#34;&gt;&lt;/p&gt;
&lt;p&gt;Heyho guys!&lt;/p&gt;
&lt;p&gt;My name is Niklas, with this blog I want to share thoughts about programming with you. Why is this blog called &amp;ldquo;The Coding Lab&amp;rdquo;? Quite simple: I have a faible for organic chemistry and writing code!&lt;/p&gt;
&lt;!-- CV data --&gt;
</description> 
    </item>
    
  </channel>
</rss>